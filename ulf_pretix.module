<?php

/**
 * @file
 * Code for the Ulf Pretix feature.
 */

include_once 'ulf_pretix.features.inc';
include_once 'ulf_pretix.permissions.inc';
include_once 'ulf_pretix.form_alterations.inc';

use Drupal\ulf_pretix\Pretix\Helper;
use Drupal\ulf_pretix\Controller\WebhookController;

/**
 * Implements hook_menu().
 */
function ulf_pretix_menu() {
  $items = [];

  $items['admin/config/services/pretix'] = [
    'title' => 'Pretix settings',
    'description' => 'Settings and defaults for Pretix integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['ulf_pretix_admin_settings_form'],
    'access arguments' => ['administer ulf pretix settings'],
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/ulf_pretix.admin.inc',
  ];

  $items['ulf_pretix/pretix/webhook/%'] = [
    'title' => 'Pretix webhook',
    'description' => 'callback endpoint for pretix webhook',
    'access callback' => TRUE,
    'page callback' => 'ulf_pretix_webhook',
    'page arguments' => [3],
    'delivery callback' => 'ulf_pretix_deliver_json',
  ];

  return $items;
}

/**
 * Deliver JSON result.
 */
function ulf_pretix_deliver_json($result) {
  drupal_json_output($result);
  exit;
}

/**
 * Menu callback.
 */
function ulf_pretix_webhook($organizer_slug) {
  try {
    $controller = new WebhookController();

    return $controller->handle($organizer_slug);
  }
  catch (\Exception $exception) {
    return [
      'error' => [
        'code' => $exception->getCode(),
        'message' => $exception->getMessage(),
      ],
    ];
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function ulf_pretix_field_formatter_info() {
  return [
    'ulf_pretix_default' => [
      'label' => t('Default'),
      'field types' => [
        'ulf_pretix_ticket_link',
      ],
    ],
  ];
}

/**
 * Implements hook_node_insert().
 */
function ulf_pretix_node_insert($node) {
  $helper = Helper::create();
  if ($helper->isPretixNode($node)) {
    $result = $helper->syncronizePretixEvent($node);
    if (isset($result['error'])) {
      drupal_set_message(t('Error creating event in pretix: %message', [
        '%message' => $result['error'],
      ]), 'error');
    }
    else {
      $pretix_event_url = $helper->getPretixEventUrl($node);
      drupal_set_message(t('Successfully created <a href="@pretix_event_url">event in pretix</a>.', [
        '@pretix_event_url' => $pretix_event_url,
      ]));
    }
  }
}

/**
 * Implements hook_node_update().
 */
function ulf_pretix_node_update($node) {
  $helper = Helper::create();
  if ($helper->isPretixNode($node)) {
    $result = $helper->syncronizePretixEvent($node);
    if (isset($result['error'])) {
      drupal_set_message(t('There was a problem updating the event in pretix. Please verify in pretix that all settings for the event are correct.'), 'error');
    }
    else {
      $pretix_event_url = $helper->getPretixEventUrl($node);
      drupal_set_message(t('Successfully updated <a href="@pretix_event_url">the event in pretix</a>.', [
        '@pretix_event_url' => $pretix_event_url,
      ]));
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function ulf_pretix_node_delete($node) {
  $helper = Helper::create();
  if ($helper->isPretixNode($node)) {
    $result = $helper->deletePretixEvent($node);
    if (isset($result['error'])) {
      drupal_set_message(t('The event could not be deleted in pretix (%message).', [
        '%message' => $result['error'],
      ]), 'error');
    }
    else {
      drupal_set_message(t('The event was successfully deleted from pretix.'));
    }
  }
}

/**
 * Implements hook_entitycache_ENTITY_TYPE_load().
 *
 * Using entity cache load to add the ticket information. Hook_entity_load seams
 * to be called after the entity cache have been set. So this ensures that the
 * link is always inserted into the field.
 */
function ulf_pretix_entitycache_node_load($entities) {
  foreach ($entities as $key => $entity) {
    if ($entity->type === 'ding_event') {
      // Uses require once behind the scene.
      module_load_include('inc', 'ulf_pretix', 'includes/ulf_pretix.api_module');

      $wrapper = entity_metadata_wrapper('node', $entity);
      $service_settings = variable_get('ulf_pretix', []);
      $pretix_info = _ulf_pretix_get_pretix_node_info($wrapper->getIdentifier());

      if ($pretix_info['maintain_copy']) {
        $url = _ulf_pretix_get_event_shop_url($service_settings, $pretix_info['pretix_slug']);
        $wrapper->field_ding_event_ticket_link->set([
          'title' => 'Pretix link',
          'url' => $url,
          'attributes' => [],
        ]);
      }
    }
  }
}

/**
 * Implements hook_entity_load().
 */
function ulf_pretix_entity_load($entities, $type) {
  if ($type === 'node' && count($entities) === 1) {
    $keys = array_keys($entities);
    $key = array_pop($keys);

    if ($entities[$key]->type === 'ding_event') {
      module_load_include('inc', 'ulf_pretix', 'includes/ulf_pretix.api_module');

      $wrapper = entity_metadata_wrapper('node', $entities[$key]);
      $service_settings = variable_get('ulf_pretix', []);
      $pretix_info = _ulf_pretix_get_pretix_node_info($wrapper->getIdentifier());

      if ($pretix_info['maintain_copy']) {
        $url = _ulf_pretix_get_event_shop_url($service_settings, $pretix_info['pretix_slug']);
        $wrapper->field_ding_event_ticket_link->set([
          'title' => 'Pretix link',
          'url' => $url,
          'attributes' => [],
        ]);
      }
    }
  }
}

/**
 * Implements hook_node_load().
 */
function ulf_pretix_node_load($nodes, $types) {
  if (array_intersect(Helper::PRETIX_CONTENT_TYPES, $types)) {
    $helper = Helper::create();
    $helper->setPretixEventInfo($nodes);
  }
}

/**
 * Implements hook_theme().
 */
function ulf_pretix_theme() {
  $theme['node__pretix_info'] = [
    'path' => drupal_get_path('module', 'ulf_pretix') . '/templates',
    'template' => 'node--pretix-info',
    'variables' => [
      'node' => NULL,
      'pretix_info' => NULL,
      'pretix_urls' => NULL,
    ],
  ];

  return $theme;
}
