<?php

/**
 * @file
 * Code for the Ulf Pretix feature.
 */

include_once 'ulf_pretix.features.inc';
include_once 'ulf_pretix.permissions.inc';
include_once 'ulf_pretix.form_alterations.inc';

use Drupal\ulf_pretix\Pretix\Client;
use Drupal\ulf_pretix\Pretix\Helper;
use Drupal\ulf_pretix\Controller\WebhookController;

/**
 * Implements hook_menu().
 */
function ulf_pretix_menu() {
  $items = [];

  $items['ulf_pretix/pretix/webhook/%'] = [
    'title' => 'Pretix webhook',
    'description' => 'callback endpoint for pretix webhook',
    'access callback' => TRUE,
    'page callback' => 'ulf_pretix_webhook',
    'page arguments' => [3],
    'delivery callback' => 'ulf_pretix_deliver_json',
  ];

  $items['ulf_pretix/api'] = [
    'access callback' => TRUE,
    'page callback' => 'ulf_pretix_api',
    'delivery callback' => 'ulf_pretix_deliver_json',
  ];

  $items['ulf_pretix/debug'] = [
    'access callback' => TRUE,
    'page callback' => 'ulf_pretix_debug',
  ];

  return $items;
}

/**
 * Deliver JSON result.
 */
function ulf_pretix_deliver_json($result) {
  drupal_json_output($result);
  exit;
}

/**
 * Menu callback.
 */
function ulf_pretix_webhook($organizer_slug) {
  try {
    $controller = new WebhookController();

    return $controller->handle($organizer_slug);
  }
  catch (\Exception $exception) {
    return [
      'error' => [
        'code' => $exception->getCode(),
        'message' => $exception->getMessage(),
      ],
    ];
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function ulf_pretix_field_formatter_info() {
  return [
    'ulf_pretix_default' => [
      'label' => t('Default'),
      'field types' => [
        'ulf_pretix_ticket_link',
      ],
    ],
  ];
}

/**
 * Implements hook_node_insert().
 */
function ulf_pretix_node_insert($node) {
  $helper = Helper::create();
  if ($helper->isPretixNode($node)) {
    $result = $helper->syncronizePretixEvent($node);
    if (isset($result['error'])) {
      drupal_set_message(t('Error creating event in pretix: %message', [
        '%message' => $result['error'],
      ]), 'error');
    }
    else {
      $pretix_event_url = $helper->getPretixEventUrl($node);
      drupal_set_message(t('Successfully created <a href="@pretix_event_url">event in pretix</a>.', [
        '@pretix_event_url' => $pretix_event_url,
      ]));
    }
  }
}

/**
 * Implements hook_node_update().
 */
function ulf_pretix_node_update($node) {
  $helper = Helper::create();
  if ($helper->isPretixNode($node)) {
    $result = $helper->syncronizePretixEvent($node);
    if (isset($result['error'])) {
      drupal_set_message(t('There was a problem updating the event in pretix. Please verify in pretix that all settings for the event are correct.'), 'error');
    }
    else {
      $pretix_event_url = $helper->getPretixEventUrl($node);
      drupal_set_message(t('Successfully updated <a href="@pretix_event_url">the event in pretix</a>.', [
        '@pretix_event_url' => $pretix_event_url,
      ]));
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function ulf_pretix_node_delete($node) {
  $helper = Helper::create();
  if ($helper->isPretixNode($node)) {
    $result = $helper->deletePretixEvent($node);
    if (isset($result['error'])) {
      drupal_set_message(t('The event could not be deleted in pretix (%message).', [
        '%message' => $result['error'],
      ]), 'error');
    }
    else {
      drupal_set_message(t('The event was successfully deleted from pretix.'));
    }
  }
}

/**
 * Implements hook_entitycache_ENTITY_TYPE_load().
 *
 * Using entity cache load to add the ticket information. Hook_entity_load seams
 * to be called after the entity cache have been set. So this ensures that the
 * link is always inserted into the field.
 */
function ulf_pretix_entitycache_node_load($entities) {
  foreach ($entities as $key => $entity) {
    if ($entity->type === 'ding_event') {
      // Uses require once behind the scene.
      module_load_include('inc', 'ulf_pretix', 'includes/ulf_pretix.api_module');

      $wrapper = entity_metadata_wrapper('node', $entity);
      $service_settings = variable_get('ulf_pretix', []);
      $pretix_info = _ulf_pretix_get_pretix_node_info($wrapper->getIdentifier());

      if ($pretix_info['maintain_copy']) {
        $url = _ulf_pretix_get_event_shop_url($service_settings, $pretix_info['pretix_slug']);
        $wrapper->field_ding_event_ticket_link->set([
          'title' => 'Pretix link',
          'url' => $url,
          'attributes' => [],
        ]);
      }
    }
  }
}

/**
 * Implements hook_entity_load().
 */
function ulf_pretix_entity_load($entities, $type) {
  if ($type === 'node' && count($entities) === 1) {
    $keys = array_keys($entities);
    $key = array_pop($keys);

    if ($entities[$key]->type === 'ding_event') {
      module_load_include('inc', 'ulf_pretix', 'includes/ulf_pretix.api_module');

      $wrapper = entity_metadata_wrapper('node', $entities[$key]);
      $service_settings = variable_get('ulf_pretix', []);
      $pretix_info = _ulf_pretix_get_pretix_node_info($wrapper->getIdentifier());

      if ($pretix_info['maintain_copy']) {
        $url = _ulf_pretix_get_event_shop_url($service_settings, $pretix_info['pretix_slug']);
        $wrapper->field_ding_event_ticket_link->set([
          'title' => 'Pretix link',
          'url' => $url,
          'attributes' => [],
        ]);
      }
    }
  }
}

/**
 * Implements hook_node_load().
 */
function ulf_pretix_node_load($nodes, $types) {
  if (array_intersect(Helper::PRETIX_CONTENT_TYPES, $types)) {
    $helper = Helper::create();
    $helper->setPretixEventInfo($nodes);
  }
}

/**
 * Implements hook_theme().
 */
function ulf_pretix_theme() {
  $theme['node__pretix_info'] = [
    'path' => drupal_get_path('module', 'ulf_pretix') . '/templates',
    'template' => 'node--pretix-info',
    'variables' => [
      'node' => NULL,
      'pretix_info' => NULL,
      'pretix_urls' => NULL,
    ],
  ];

  return $theme;
}

/**
 * API controller.
 */
function ulf_pretix_api() {
  global $user;

  $wrapper = entity_metadata_wrapper('user', 6);
  if (TRUE === $wrapper->field_pretix_enable->value()) {
    $client = new Client(
      $wrapper->field_pretix_url->value(),
      $wrapper->field_pretix_api_token->value(),
      $wrapper->field_pretix_organizer_slug->value()
    );

    $method = new \ReflectionMethod($client, 'get');
    $method->setAccessible(TRUE);

    $args = array_slice(arg(), 2);
    $path = implode('/', $args) . '/';
    $result = $method->invoke($client, $path, ['query' => drupal_get_query_parameters()]);

    if (isset($result->error)) {
      return [
        'code' => $result->code,
        'error' => $result->error,
      ];
    }

    return $result->data;
  }
}

// @codingStandardsIgnoreStart
/**
 *
 */
function ulf_pretix_debug() {
  // Return.
  // ulf_pretix_cleanup();

  $helper = Helper::create();

  $node = node_load(3);
header('content-type: text/plain'); echo var_export($node, true); die(__FILE__.':'.__LINE__.':'.__METHOD__);

  $result = $helper->syncronizePretixEvent($node);
  // $node = node_load($node->nid);
  //  $result = $helper->getPretixWidgetCode($node);
  // $url = $helper->getPretixEventUrl($node);
  header('content-type: text/plain'); echo var_export(['result' => $result], TRUE); die(__FILE__ . ':' . __LINE__ . ':' . __METHOD__);

  $pretix_url = 'http://172.17.0.1:8000/';
  $api_token = 'qzkqmioc8009xn7m5kb80ykmo5sa5j67yysj9pdfheubdf4ymn6fyx5wsv8qlkq5';
  $organizer_slug = 'itk-dev';
  $event_slug = 'template-series';

  $result = $helper->validateTemplateEvent($pretix_url, $api_token, $organizer_slug, $event_slug);
  header('content-type: text/plain'); echo var_export($result, TRUE); die(__FILE__ . ':' . __LINE__ . ':' . __METHOD__);

  $client = new Client($pretix_url, $api_token, $organizer_slug);

  $node = node_load(3);

  // header('content-type: text/plain'); echo var_export($node->pretix, TRUE); die(__FILE__ . ':' . __LINE__ . ':' . __METHOD__);.
  $result = $helper->createPretixEvent($node);

  header('content-type: text/plain'); echo var_export($result, TRUE); die(__FILE__ . ':' . __LINE__ . ':' . __METHOD__);
  return;

  $wrapper = entity_metadata_wrapper('node', $node);

  $result = $client->getEvent('template-series-clone');
  $event = $result->data;

  $dates = $wrapper->field_pretix_date->value();
  foreach ($dates as $date) {

    // 'field_pretix_spaces'
    // 'field_pretix_start_date'
    // 'field_pretix_presale'
    // 'field_pretix_free'
    // 'field_pretix_price'.
    $date = entity_metadata_wrapper('field_collection_item', $date);
    $data = [
      'name' => $wrapper->title->value(),
      'date_from' => (new \DateTime('@' . $date->field_pretix_start_date->value()))->format(\DateTime::ATOM),

      'active' => TRUE,
      'is_public' => TRUE,
      'date_to' => NULL,
      'date_admission' => NULL,
      'presale_end' => NULL,
      'location' => NULL,
      'seating_plan' => NULL,
      'seat_category_mapping' => [],
      'item_price_overrides' => [],
      'variation_price_overrides' => [],
      // Important: meta_data value must be an object!
      'meta_data' => (object) [],
    ];

    if ($date->field_pretix_presale->value()) {
      $data['presale_start'] = (new \DateTime('@' . $date->field_pretix_presale->value()))->format(\DateTime::ATOM);
    }

    $result = $client->createSubevent($event->slug, $data);

    header('content-type: text/plain'); echo var_export($result, TRUE); die(__FILE__ . ':' . __LINE__ . ':' . __METHOD__);
    header('content-type: text/plain'); echo var_export($date->field_pretix_spaces->value(), TRUE); die(__FILE__ . ':' . __LINE__ . ':' . __METHOD__);
  }
  // node_save($node);
  // header('content-type: text/plain'); echo var_export(, true); die(__FILE__.':'.__LINE__.':'.__METHOD__);.
  return;

  // $helper = new Helper();
  // $controller = new WebhookController('hest');.
  // $result = $client->ensureWebhook($organizer_slug);
  // $result = $helper->getOrganizer($organizer_slug);
  // header('content-type: text/plain'); echo var_export($client->getSubevents($event_slug)->data->results, true); die(__FILE__.':'.__LINE__.':'.__METHOD__);.
  // $data = [
  //   'name' => __METHOD__,
  //   'slug' => mt_rand(),
  //   'has_subevents' => true,
  //   'date_from' => (new \DateTime('2001-01-01'))->format(\DateTime::ATOM),
  // ];
  // $result = $client->createEvent($data);
  // $event = $result->data;.
  header('content-type: text/plain');

  $result = $client->getEvent('template-series-clone');
  $event = $result->data;
  // Echo var_export($event);
  $result = $client->createSubevent($event->slug, [
    'name' => __METHOD__,
    'date_from' => (new \DateTime('2001-01-02'))->format(\DateTime::ATOM),
    // 'meta_data' => [
    //   // 'test' => 'hest',
    // ],.
    'name' => ['en' => 'First Sample Conference'],
    'active' => FALSE,
    'is_public' => TRUE,
    'date_from' => '2017-12-27T10:00:00Z',
    'date_to' => NULL,
    'date_admission' => NULL,
    'presale_start' => NULL,
    'presale_end' => NULL,
    'location' => NULL,
    'seating_plan' => NULL,
    'seat_category_mapping' => [],
    'item_price_overrides' => [
      // [
      //   'item' => 2,
      //     'price' => '12.00'
      // ].
    ],
    'variation_price_overrides' => [],
    // Important: meta_data value must be an object!
    'meta_data' => (object) [],
  ]);

  echo var_export($result);

  // $result = $client->createSubevent($event->slug, [
  //   'name' => __METHOD__,
  //   'has_subevents' => true,
  //   'date_from' => (new \DateTime('2001-01-03'))->format(\DateTime::ATOM),
  //   'meta_data' => [],
  // ]);.
}

/**
 * DEBUG: Clean up pretix events.
 */
function ulf_pretix_cleanup() {
  $pretix_url = 'http://172.17.0.1:8000/';
  $api_token = 'qzkqmioc8009xn7m5kb80ykmo5sa5j67yysj9pdfheubdf4ymn6fyx5wsv8qlkq5';
  $organizer_slug = 'itk-dev';
  $client = new Client($pretix_url, $api_token, $organizer_slug);

  header('Content-type: text/plain');
  $result = $client->getEvents();
  echo '#events: ' . $result->data->count, PHP_EOL;
  foreach ($result->data->results as $event) {
    echo 'event: ' . $event->slug, PHP_EOL;
    if (!preg_match('/template/', $event->slug)) {
      $client->deleteEvent($event);
    }
  }

  db_delete('ulf_pretix_events')->execute();
  db_delete('ulf_pretix_subevents')->execute();
}
// @codingStandardsIgnoreEnd
