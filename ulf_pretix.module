<?php

/**
 * @file
 * Code for the Ulf Pretix feature.
 */

include_once 'ulf_pretix.features.inc';
include_once 'ulf_pretix.permissions.inc';
include_once 'ulf_pretix.form_alterations.inc';

use Drupal\ulf_pretix\Pretix\EventHelper;
use Drupal\ulf_pretix\Pretix\Mailer;
use Drupal\ulf_pretix\Controller\WebhookController;

/**
 * Implements hook_menu().
 */
function ulf_pretix_menu() {
  $items = [];

  $items['admin/config/services/pretix'] = [
    'title' => 'Pretix settings',
    'description' => 'Settings and defaults for Pretix integration',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['ulf_pretix_admin_settings_form'],
    'access arguments' => ['administer ulf pretix settings'],
    'type' => MENU_NORMAL_ITEM,
    'file' => 'includes/ulf_pretix.admin.inc',
  ];

  $items['ulf_pretix/pretix/webhook/%'] = [
    'title' => 'Pretix webhook',
    'description' => 'callback endpoint for pretix webhook',
    'access callback' => TRUE,
    'page callback' => 'ulf_pretix_webhook',
    'page arguments' => [3],
    'delivery callback' => 'ulf_pretix_deliver_json',
  ];

  return $items;
}

/**
 * Deliver JSON result.
 *
 * @param mixed $result
 *   The result.
 */
function ulf_pretix_deliver_json($result) {
  drupal_json_output($result);
  exit;
}

/**
 * Menu callback.
 *
 * @param string $organizer_slug
 *   The organizer slug.
 *
 * @return array
 *   The result.
 */
function ulf_pretix_webhook($organizer_slug) {
  try {
    $controller = WebhookController::create();

    return $controller->handle($organizer_slug);
  }
  catch (\Exception $exception) {
    return [
      'error' => [
        'code' => $exception->getCode(),
        'message' => $exception->getMessage(),
      ],
    ];
  }
}

/**
 * Implements hook_field_formatter_info().
 */
function ulf_pretix_field_formatter_info() {
  return [
    'ulf_pretix_default' => [
      'label' => t('Default'),
      'field types' => [
        'ulf_pretix_ticket_link',
      ],
    ],
  ];
}

/**
 * Implements hook_node_insert().
 */
function ulf_pretix_node_insert($node) {
  _ulf_synchronize_pretix_event($node);
}

/**
 * Implements hook_node_update().
 */
function ulf_pretix_node_update($node) {
  _ulf_synchronize_pretix_event($node);
}

/**
 * Synchronize pretix event with node.
 *
 * @param object $node
 *   The node.
 */
function _ulf_synchronize_pretix_event($node) {
  $wrapper = entity_metadata_wrapper('node', $node);
  if (TRUE !== $wrapper->field_pretix_enable->value()) {
    return;
  }
  $helper = EventHelper::create();
  if ($helper->isPretixEventNode($node)) {
    $result = $helper->syncronizePretixEvent($node);
    if ($helper->isError($result)) {
      drupal_set_message(t('There was a problem updating the event in pretix. Please verify in pretix that all settings for the event are correct.'), 'error');
    }
    else {
      $pretix_event_url = $helper->getPretixEventUrl($node);
      drupal_set_message(t('Successfully updated <a href="@pretix_event_url">the event in pretix</a>.', [
        '@pretix_event_url' => $pretix_event_url,
      ]), 'status', FALSE);

      $live = $node->status;
      $result = $helper->setEventLive($node, $live);
      if ($helper->isError($result)) {
        $data = $helper->getErrorData($result);
        $errors = isset($data->live) ? implode('; ', $data->live) : NULL;
        $message = $live
          ? t('Error setting <a href="@pretix_event_url">the pretix event</a> live: @errors', [
            '@pretix_event_url' => $pretix_event_url,
            '@errors' => $errors,
          ])
          : t('Error setting <a href="@pretix_event_url">the pretix event</a> not live: @errors', [
            '@pretix_event_url' => $pretix_event_url,
            '@errors' => $errors,
          ]);
        drupal_set_message($message, 'error', FALSE);
      }
      else {
        $message = $live
          ? t('Successfully set <a href="@pretix_event_url">the pretix event</a> live.', [
            '@pretix_event_url' => $pretix_event_url,
          ])
          : t('Successfully set <a href="@pretix_event_url">the pretix event</a> not live.', [
            '@pretix_event_url' => $pretix_event_url,
          ]);
        drupal_set_message($message, 'status', FALSE);
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function ulf_pretix_node_delete($node) {
  $helper = EventHelper::create();
  if ($helper->isPretixEventNode($node)) {
    $result = $helper->deletePretixEvent($node);
    if (isset($result['error'])) {
      drupal_set_message(t('The event could not be deleted in pretix (%message).', [
        '%message' => $result['error'],
      ]), 'error');
    }
    else {
      drupal_set_message(t('The event was successfully deleted from pretix.'));
    }
  }
}

/**
 * Implements hook_node_load().
 */
function ulf_pretix_node_load($nodes, $types) {
  if (array_intersect(EventHelper::PRETIX_CONTENT_TYPES, $types)) {
    $helper = EventHelper::create();
    $helper->setPretixEventInfo($nodes);
  }
}

/**
 * Implements hook_theme().
 */
function ulf_pretix_theme() {
  $theme['node__pretix_info'] = [
    'path' => drupal_get_path('module', 'ulf_pretix') . '/templates',
    'template' => 'node--pretix-info',
    'variables' => [
      'node' => NULL,
      'pretix_info' => NULL,
      'pretix_urls' => NULL,
    ],
  ];

  return $theme;
}

/**
 * Implements hook_preprocees_node().
 */
function ulf_pretix_preprocess_node(&$variables) {
  // Check if we should show a pretix shop widget.
  $widgetNode = node_load($variables['nid']);
  // We may have to show widget from another node.
  $wrapper = entity_metadata_wrapper('node', $widgetNode);
  if (!empty($wrapper->field_pretix_show_widget_from->value())) {
    $widgetNode = $wrapper->field_pretix_show_widget_from->value();
    $wrapper = entity_metadata_wrapper('node', $widgetNode->nid);
  }
  if (!empty($widgetNode->pretix['data']) && TRUE === $wrapper->field_pretix_enable->value()) {
    // Render the pretix widget if event is live.
    $data = $widgetNode->pretix['data'];
    if (TRUE === $data['event']['live']
      && isset($data['pretix_url'],
        $data['pretix_organizer_slug'],
        $data['pretix_event_slug'],
        $data['event']['live'])) {
      $event_url = $data['pretix_url'] . '/' . $data['pretix_organizer_slug'] . '/' . $data['pretix_event_slug'] . '/';
      $widget_css_url = $event_url . 'widget/v1.css';
      $widget_js_url = $data['pretix_url'] . '/widget/v1.en.js';

      drupal_add_css(drupal_get_path('module', 'ulf_pretix') . '/css/ulf_pretix.css');
      $variables['pretix_widget'] = [
        'stylesheet' => '<link rel="stylesheet" type="text/css" href="' . $widget_css_url . '">',
        'javascript' => '<script type="text/javascript" src="' . $widget_js_url . '" async></script>',
        'widget' => '<pretix-widget event="' . $event_url . '"></pretix-widget>',
        'noscript' => '<noscript><div class="pretix-widget"><div class="pretix-widget-info-message">'
        . t('JavaScript deactivated. Go to <a target="_blank" rel="noopener" href="@event_url">@event_url</a> to buy tickets.',
            ['@event_url' => $event_url]
        )
        . '</div></div></noscript>',
      ];
    }
    else {
      $variables['pretix_widget'] = NULL;
    }
  }

  if (isset($variables['node'])) {
    $node = $variables['node'];
    if (isset($node->pretix['data']['available']) && FALSE === $node->pretix['data']['available']) {
      $variables['ribbon_message'] = t('Sold out');
      $variables['ribbon_class_names'] = ['warning'];
    }
  }
}

/**
 * Implements hook_mail().
 */
function ulf_pretix_mail($key, &$message, $params) {
  $mailer = Mailer::create();
  $mailer->render($key, $message, $params);
}
